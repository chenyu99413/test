<?php
class Controller_Product extends Controller_Abstract {
	/**
	 */
	function actionIndex() {
	}
	
	/**
	 * 产品一览
	 */
	function actionSearch() {
		$select = Product::find ()->order ( 'product_name' );
		$this->_view ['products'] = $select->getAll ();
	}
	
	/**
	 * 产品显示
	 */
	function actionEdit() {
		//产品信息
		$product = Product::find ( 'product_id = ?', request ( "id" ) )->getOne ();
		
		//产品保存
		if (request_is_post ()) {
			$conn = QDB::getConn ();
			$conn->startTrans ();
			
			//产品
			if (request ( "product" ) != null || strlen ( request ( "product" ) ) > 0) {
				$product->changeProps ( request ( "product" ) );
				$product->save ();
			}
			//产品-价格-分区-偏派列表
			if (request ( "productppr" ) != null || strlen ( request ( "productppr" ) ) > 0) {
				Productppr::meta ()->destroyWhere ( "product_id = ?", $product->product_id );
				foreach ( json_decode ( request ( "productppr" ) ) as $value ) {
					$productprp = new Productppr ();
					$value->effective_time=strtotime($value->effective_time."00:00:00");
					$value->invalid_time=strtotime($value->invalid_time."23:59:59");
					$productprp->changeProps ( $value );
					$productprp->product_id=$product->product_id;
					$productprp->save ();
				}
			}
			
			$conn->completeTrans ();
			return $this->_redirectMessage ( "产品信息", "保存成功", url ( "product/edit", array (
				"id" => $product->id ()
			) ) );
		}
		$this->_view ["tabs"] = $this::createTabs ( $product );
		$this->_view ["networks"] = Network::networks ();
		$this->_view ["product"] = $product;
	}
	
	
	/**
	 * 创建标签
	 *
	 * @param 产品 $product        	
	 * @return 标签列
	 */
	static function createTabs($product) {
		if ($product->isNewRecord ()) {
			return array (
				array (
					"id" => "0",
					"title" => "基本信息",
					"href" => "" 
				) 
			);
		} else {
			return array (
				array (
					"id" => "0",
					"title" => "基本信息",
					"href" => url ( "product/edit", array (
						"id" => $product->product_id 
					) ) 
				),
				array (
					"id" => "4",
					"title" => "渠道成本",
					"href" => url ( "channelcost/search", array (
						"id" => $product->product_id 
					) ) 
				) 
			);
		}
	}
	/**
	 * 保存燃油
	 */
	function actionProductfuelsave(){
	    //燃油附加费
	    if (request('productfuel')){
	        $p = request ( "productfuel" );
	        $productfuel = Productfuel::find ( "product_fuel_id = ?", $p ["product_fuel_id"] )->getOne ();
	        $productfuel->product_id = request('product_id');
	        $p['effective_date']=strtotime($p['effective_date']."00:00:00");
	        $p['fail_date']=strtotime($p['fail_date']."23:59:59");
	        $productfuel->changeProps ( $p );
	        $productfuel->save ();
	        echo ($productfuel->product_fuel_id);
	    }
	    exit();
	}
	
	/**
	 * 燃油删除
	 */
	function actionFueldelete() {
	    if (request ( "product_fuel_id" )) {
	        $productfuel = Productfuel::find ( "product_fuel_id = ?", request ( "product_fuel_id" ) )->getOne ();
	        $productfuel->destroy ();
	    }
	    exit();
	}
	/**
	 * 无服务邮编
	 */
	function actionNoserivcezipcode() {
	    $noserivce=Noserivcezipcode::find();
	    //邮编,精确查询
	    if(request('zip_code')){
	        $noserivce->where('zip_code = ?',request('zip_code'));
	    }
	    //城市,模糊查询
	    if(request('city')){
	        $noserivce->where('city like ?','%'.request('city').'%');
	    }
	    //国家，精确查询
	    if(request('country_code')){
	        $noserivce->where('country_code = ?',request('country_code'));
	    }
	    //产品查询
	    if(request('service_code')){
	        $noserivce->where('service_code = ?',request('service_code'));
	    }
	    $pagination = null;
	    $noserivcelist=$noserivce->limitPage ( (request_is_post () ? 1 : request ( "page", 1 )), 30 )
	    ->fetchPagination ( $pagination )->order('zip_code_id desc')->getAll();
	    $this->_view['noserivcelist']=$noserivcelist;
	    $this->_view['pagination']=$pagination;
	}
	/**
	 * 无服务邮编导入
	 */
	function actionImport() {
	    set_time_limit(0);
	    if(request_is_post ()){
	        $errors = array ();
	        $uploader = new Helper_Uploader();
	        //检查指定名字的上传对象是否存在
	        if (! $uploader->existsFile ( 'file' )) {
	            return $this->_redirectMessage('未上传文件','',url('product/import'));
	        }
	        $file = $uploader->file ( 'file' );//获得文件对象
	        if (! $file->isValid ( 'xls,xlsx' )) {
	            return $this->_redirectMessage('文件格式不正确：xls、xlsx','',url('product/import'));
	        }
	        
	        $des_dir = Q::ini('upload_tmp_dir');//缓存路径
	        $filename = $des_dir.DS.date ( 'YmdHis' ).'ExpenseImport.'.$file->extname ();
	        $file->move ( $filename );
	        ini_set ( "memory_limit", "3072M" );
	        $xls = Helper_Excel::readFile ( $filename,true);
	        $sheet =$xls->toHeaderMap ();
	        
	        //删除空单元
// 	        Helper_Array::removeEmpty ( $sheet );
	        //导入的表中有数据
            foreach ($sheet as &$row){
                if(isset($row ['邮编'])&&isset($row ['城市'])&&isset($row ['国家'])&&isset($row ['产品'])){
                   if(strlen($row ['产品'])==0){
                      $row ['状态']='失败';
                      $row ['信息']='未填写产品';
                      continue;
                   }else{
                      $product = Product::find("product_name = ?",$row ['产品'])->getOne();
                      if($product->isNewRecord()){
                         $row ['状态']='失败';
                         $row ['信息']='产品不存在';
                         continue;
                      }
                      if(strlen($row ['邮编'])==0&&strlen($row ['城市'])==0&&strlen($row ['国家'])==0){
                         $row ['状态']='失败';
                         $row ['信息']='邮编、城市、国家必填一个';
                         continue;
                      }else{
                         if(strlen($row ['邮编'])>0){
                            if(strlen($row ['邮编'])!=5 && strlen($row ['邮编'])!=9){
                               $row ['状态']='失败';
                               $row ['信息']='邮编错误';
                               continue;
                            }
                         }
                         if(strlen($row ['国家'])>0){
                            $country = Country::find("code_word_two = ?",$row ['国家'])->getOne();
                            if($country->isNewRecord()){
                               $row ['状态']='失败';
                               $row ['信息']='国家二字码错误';
                               continue;
                            }
                         }
                         $noservice = Noserivcezipcode::find("zip_code = ? and city = ? and country_code = ? and service_code = ?",$row ['邮编'],$row ['城市'],$row ['国家'],$row ['产品'])->getOne();
                         if(!$noservice->isNewRecord()){
                            $row ['状态']='失败';
                            $row ['信息']='已存在';
                            continue;
                         }else{
                            $noservice_code = new Noserivcezipcode();
                            $noservice_code->zip_code = $row ['邮编'];
                            $noservice_code->city  = $row ['城市'];
                            $noservice_code->country_code = $row ['国家'];
                            $noservice_code->service_code = $row ['产品'];
                            $noservice_code->save();
                            $row['状态']='成功';
                            $row['信息']='';
                         }
                      }
                   }
                }else{
                   return $this->_redirectMessage('缺少字段','',url('product/import'));
                }
            }
            $this->_view['sheet']=$sheet;
	    }
	}
	/**
	 * 删除
	 */
	function actionDelete(){
	    $zip_code_id = request('zip_code_id');
	    $del_zip_code = Noserivcezipcode::find('zip_code_id = ?',$zip_code_id)->getOne()->destroy();
	    return $this->_redirect(url('product/noserivcezipcode'));
	}
	/**
	 * 下载
	 */
	function actiondownload(){
	    return $this->_redirect(QContext::instance()->baseDir(). 'public/download/无服务邮编、城市、国家导入模板.xlsx');
	}
	
	/*
	 * 黑名单列表
	 */
	function actionblacklist(){
	    $blacklist=blacklist::find();
	    //邮编,精确查询
	    if(request('consignee_postal_code')){
	        $blacklist->where('consignee_postal_code = ?',request('consignee_postal_code'));
	    }
	    //城市,模糊查询
	    if(request('consignee_city')){
	        $blacklist->where('consignee_city like ?','%'.request('consignee_city').'%');
	    }
	    //省州,模糊查询
	    if(request('consignee_state_region_code')){
	        $blacklist->where('consignee_state_region_code like ?','%'.request('consignee_state_region_code').'%');
	    }
	    //发件人,模糊查询
	    if(request('sender_name1')){
	        $blacklist->where('sender_name1 like ?','%'.request('sender_name1').'%');
	    }
	    //国家，精确查询
	    if(request('consignee_country_code')){
	        $blacklist->where('consignee_country_code = ?',request('consignee_country_code'));
	    }
	    //产品查询
	    if(request('product_id')){
	        $blacklist->where('product_id = ?',request('product_id'));
	    }
	    $pagination = null;
	    $list=$blacklist->limitPage ( (request_is_post () ? 1 : request ( "page", 1 )), 30 )
	    ->fetchPagination ( $pagination )->order('create_time desc')->getAll();
	    $this->_view['list']=$list;
	    $this->_view['pagination']=$pagination;
	}
	
	/*
	 * 黑名单详情页
	 */
	function actionblackedit(){
	    $black=new blacklist();
	    if(request('blacklist_id')){
	        $black=blacklist::find('blacklist_id = ?',request('blacklist_id'))->getOne();
	    }
	    if(request_is_post()){
	    	if(!trim(request('consignee_country_code')) && !trim(request('consignee_postal_code'))&& !trim(request('consignee_city'))&& !trim(request('consignee_state_region_code'))&& !trim(request('sender_name1'))&& !trim(request('sender_name2'))&& !trim(request('sender_street1'))&& !trim(request('product_name'))){
	    		return $this->_redirectMessage('保存失败','至少填一项',url('product/blacklist'));
	    	}
	        $black->product_id=request('product_id');
	        $black->consignee_country_code=request('consignee_country_code');
	        $black->consignee_postal_code=request('consignee_postal_code');
	        $black->consignee_city=request('consignee_city');
	        $black->consignee_state_region_code=request('consignee_state_region_code');
	        $black->product_name=request('product_name');
	        $black->sender_name1=request('sender_name1');
	        $black->sender_name2=request('sender_name2');
	        $black->sender_street1=request('sender_street1');
	        $black->save();
	        return $this->_redirectMessage('保存成功','',url('product/blacklist'));
	    }
	    $this->_view['black']=$black;
	}
	
	/*
	 * 黑名单删除
	 */
	function actionbdelete(){
	    $blacklist_id = request('blacklist_id');
	    blacklist::meta()->destroyWhere('blacklist_id = ? ',$blacklist_id);
	    return $this->_redirect(url('product/blacklist'));
	}
	
	/**
	 * 邮政通讯录
	 */
	function actionbook(){
	    $postalbook=postalbook::find();
	    //国家,精确查询
	    if(request('code_word_two')){
	        $postalbook->where('code_word_two = ?',request('code_word_two'));
	    }
	    $pagination = null;
	    $list=$postalbook->limitPage ( (request_is_post () ? 1 : request ( "page", 1 )), 30 )
	    ->fetchPagination ( $pagination )->order('create_time desc')->getAll();
	    $this->_view['list']=$list;
	    $this->_view['pagination']=$pagination;
	}
	
	/*
	 * 邮政通讯录详情
	 */
	function actionbookedit(){
	    $postalbook=new postalbook();
	    if(request('book_id')){
	        $postalbook=postalbook::find('book_id = ?',request('book_id'))->getOne();
	    }
	    if(request_is_post()){
	        $postalbook->code_word_two=request('code_word_two');
	        $postalbook->servicetel=request('servicetel');
	        $postalbook->servicesch=request('servicesch');
	        $postalbook->customtel=request('customtel');
	        $postalbook->save();
	        return $this->_redirectMessage('保存成功','',url('product/book'));
	    }
	    $this->_view['postalbook']=$postalbook;
	}
	
	function actionbookdelete(){
	    $book_id = request('book_id');
	    postalbook::meta()->destroyWhere('book_id = ? ',$book_id);
	    return $this->_redirect(url('product/book'));
	}
	function actionEmailTemplate(){
	    $emailtemplate=EmailTemplate::find();
	    $pagination = null;
	    $list=$emailtemplate->limitPage ( (request_is_post () ? 1 : request ( "page", 1 )), 30 )
	    ->fetchPagination ( $pagination )->order('create_time desc')->getAll();
	    $this->_view['list']=$list;
	    $this->_view['pagination']=$pagination;
	}
	function actionTemplateEdit(){
	    $template = EmailTemplate::find('id = ?',request('id'))->getOne();
	    if(request_is_post()){
	        //判断模板名称是否存在
	        $template_check=EmailTemplate::find('id = ?',request('id'))->getOne();
	        if(!$template_check->isNewRecord() && ($template_check->id!=request('id'))){
	            return $this->_redirectMessage('编辑失败', '模板已存在', url('/templateedit',array('id'=>$template->id)),2);
	        }else{
	            $template = EmailTemplate::find('id = ?',request('id'))->getOne();
	            $template->template_name = request('template_name');
	            $template->template_text = request('template_text');
	            $template->save();
	            return $this->_redirectMessage('邮件模板编辑', '编辑成功', url('product/emailtemplate'));
	        }
	    }
	    $this->_view['template']=$template;
	}
	function actionTemplateDel(){
	    $template = EmailTemplate::find('id = ?',request('id'))->getOne();
	    if($template->isNewRecord()){
	        return false;
	    }else{
	        $template->destroy();
	        return 'delsuccess'; 
	    }
	}
	function actionTemplateInfo(){
	    if(request('ali_order_no') && request('id')){
	       $data = array();
	       $template = EmailTemplate::find('id = ?',request('id'))->getOne();
	       if($template->isNewRecord()){
	           $data['error'] = 'notemplate';
	           return json_encode($data);
	       }
	       $order = Order::find('ali_order_no = ?',request('ali_order_no'))->getOne();
	       if($order->isNewRecord()){
	           $data['error'] = 'noorder';
	           return json_encode($data);
	       }
	       $postalbook = postalbook::find('code_word_two = ?',$order->consignee_country_code)->getOne();
// 	       if($postalbook->isNewRecord()){
// 	           $data['error'] = 'nopostal';
// 	           return json_encode($data);
// 	       }
	       $template_info = preg_replace('/ali_order_no/',$order->ali_order_no, $template->template_text);
	       $template_info = preg_replace('/tracking_no/',$order->tracking_no, $template_info);
	       $template_info = preg_replace('/reference_no/',$order->reference_no, $template_info);
	       if(strlen($order->channel->trace_network_code)>0){
	          $template_info = preg_replace('/network_code/',$order->channel->trace_network_code, $template_info);
	       }else{
	          $template_info = preg_replace('/network_code/',$order->channel->network_code, $template_info);
	       }
	       $template_info = preg_replace('/consignee_country_code/',$order->consignee_country_code, $template_info);
	       $template_info = preg_replace('/servicetel/',$postalbook->servicetel, $template_info);
	       $template_info = preg_replace('/servicesch/',$postalbook->servicesch, $template_info);
	       $template_info = preg_replace('/customtel/',$postalbook->customtel, $template_info);
	       $data['message'] = $template_info;
	       return json_encode($data);
	    }else{
	        $data['error'] = 'nodata';
	        return json_encode($data);
	    }
	}
	function actionSendTemplate(){
	    if(request('id')&&request('ali_order_no')&&request('message')){
	       $template = EmailTemplate::find('id = ?',request('id'))->getOne();
	       $order = Order::find('ali_order_no = ?',request('ali_order_no'))->getOne();
	       if($template->isNewRecord()){
	          $data['error'] = 'notemplate';
	          return json_encode($data);
	       }
	       $msg = nl2br(request('message'));
	       $email_response=Helper_Mailer::sendtemplate($order->sender_email,$template->template_name,$msg);
	       QLog::log($email_response);
	       if($email_response == 'email_success'){
	          $data['success'] = 'success';
	          return json_encode($data);
	       }else{
	          $data['errorinfo'] = $email_response;
	          return json_encode($data);
	       }
	    }else{
	       $data['error'] = 'nodata';
	       return json_encode($data);
	    }
	    exit();
	}
}