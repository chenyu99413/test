<?php
class Controller_Warehouse extends Controller_Abstract {
	/**
	 * 包裹入库
	 */
	function actionIn() {
	}
	function actionInScan() {
		header ( 'Content-Type:application/json' );
		$ret = array (
			'code' => '1000',
			'msg' => '',
			'sound' => 'cuowu.mp3',
			'data' => '',
			'status' => false
		);
		$type = array (
			'ali_order_no' => '阿里单号',
			'reference_no' => '快递单号'
		);
		$select = Order::find ();
		if (request ( 'scan_no_type' ) == 'reference_no') {
			$count = $select->where ( 'reference_no = ?', request ( 'scan_no' ) )
				->getCount ();
			if ($count > 1) {
				$ret ['msg'] = '请拆包';
				$ret ['sound'] = 'qingchaibao.mp3';
				return json_encode ( $ret );
			} else if ($count==0) {
				$ret ['msg'] = '错误的快递单号';
				return json_encode ( $ret );
			}
		}
		$order = Order::find ( request ( 'scan_no_type' ) . ' = ?', request ( 'scan_no' ) )
			->getOne ();
		if ($order->isNewRecord ()) {
			$ret ['msg'] = '单号错误，或包裹数据不存在';
			return json_encode ( $ret );
		}
		$err_status = array (
			2 => '已取消',
			3 => '已退货',
			4 => '已付款',
			5 => '已入库',
			6 => '已出库',
			7 => '待发送',
			8 => '已发送',
			9 => '已签收',
			10 => '已查验',
			11 => '待退货'
		);
		if (array_key_exists ( $order->order_status, $err_status )) {
			$ret ['msg'] = '订单状态为【' . $err_status [$order->order_status] . '】';
			return json_encode ( $ret );
		}
		$order_packages = Orderpackage::find ( 'order_id = ?', $order->order_id )->getAll ();
		$far_packages = Farpackage::find ( 'order_id = ?', $order->order_id )->getAll ();
		$ret ['code'] = '0';
		$ret ['msg'] = '扫描成功，共 ' . Helper_Array::sumBy ( $order_packages->toArray (), 'quantity' ) . ' 个包裹';
		$ret ['sound'] = 'chenggongqingkaishichengzhong.mp3';
		$ret ['data'] = array (
			'order' => $order->toArray (),
			'order_package' => $order_packages->toArray (),
			'far_package' => $far_packages->toArray ()
		);
		$ret ['status'] = true;
		
		return json_encode ( $ret );
		exit ();
	}
	/**
	 * 入库 保存
	 */
	function actionInSave() {
		header ( 'Content-Type:application/json' );
		$arr = json_decode ( request ( 'jsonstr' ), true );
		QLog::log ( print_r ( $arr, true ) );
		$ret = array (
			'code' => '1000',
			'msg' => '',
			'sound' => 'rukushibai.mp3',
			'data' => '',
			'status' => false
		);
		try {
			$order = Order::find ( 'order_id = ?', $arr ['order_id'] )->getOne ();
			if ($order->isNewRecord ()) {
				$ret ['msg'] = '单号错误，或包裹数据不存在';
				return json_encode ( $ret );
			}
			$is_jipao = 0;
			$total_weight_income_in=0;//计费重
			$total_weight_actual_in = 0; // 实重总重
			Farpackage::meta ()->deleteWhere ( 'order_id=?', $order->order_id );
			foreach ( $arr ['package_list'] as $value ) {
				if ($value ['jipao'] > $value ['weight']) {
					$is_jipao = 1;
					$total_weight_income_in +=$value ['jipao'] >20? ceil($value ['jipao'])* $value ['quantity']: ceil($value ['jipao']/0.5)*0.5* $value ['quantity'];
				}else {
					$total_weight_income_in +=$value ['weight']>20?ceil($value ['weight']) * $value ['quantity']:ceil($value ['weight']/0.5)*0.5*$value ['quantity'];
				}
				$total_weight_actual_in += $value ['weight'] * $value ['quantity'];
				$far_package = new Farpackage ();
				$far_package->order_id = $order->order_id;
				$far_package->weight = $value ['weight'];
				$far_package->length = $value ['length'];
				$far_package->width = $value ['width'];
				$far_package->height = $value ['height'];
				$far_package->quantity = $value ['quantity'];
				$far_package->save ();
			}
			$order->volumn_chargeable = $is_jipao;
			$order->weight_income_in = $total_weight_income_in>20?ceil($total_weight_income_in):$total_weight_income_in;
			$order->weight_actual_in = $total_weight_actual_in;
			$order->save ();

			$fee_item_code = Helper_Array::toHashmap ( FeeItem::find ()->setColumns ( 'item_code,sub_code,item_name' )
				->asArray ()
				->getAll (), 'item_code' );
			$quote = new Helper_Quote ();
			$receivable = $quote->receivable ( $order, $order->weight_income_in, $arr ['EX0003'], $arr ['EX0002'], $arr ['EX0034'] );
			if(!count($receivable)){
				$ret ['msg'] = '无法计算价格';
				$ret ['weight_income_in']=$total_weight_income_in;
				return json_encode ( $ret );
			}
			Fee::meta ()->deleteWhere ( 'fee_type=1 and order_id=?', $order->order_id );
			QLog::log ( print_r ( $receivable, true ) );
			foreach ( $receivable as $key => $value ) {
				if ($value ['fee']) {
					$fee = new Fee ( array (
						'order_id' => $order->order_id,
						'fee_type' => 1,
						'fee_item_code' => $fee_item_code [$key] ['sub_code'],
						'fee_item_name' => $fee_item_code [$key] ['item_name'],
						'quantity' => $value ['quantity'],
						'amount' => $value ['fee']
					) );
					$fee->save ();
				}
			}
			$order->order_status = '5'; // 5 入库
			$order->save ();
		} catch ( Exception $e ) {
			$ret ['msg'] = '发生异常，请稍后重新操作此单【' . $arr ['aliorderno'] . '】';
			return json_encode ( $ret );
		}

		if ($order->declaration_type == 'DL' || $order->total_amount > 700 || $order->weight_actual_in > 70) {
			$ret ['msg'] = '报关件，请操作下一单';
			$ret ['sound'] = 'baoguanjian.mp3';
		} else {
			$ret ['msg'] = '入库成功，请操作下一单';
			$ret ['sound'] = 'rukuchenggong.mp3';
		}
		$ret ['code'] = '0';
		$ret ['data'] = array ();
		$ret ['status'] = true;
		$ret ['weight_income_in']=$total_weight_income_in;
		return json_encode ( $ret );
		exit ();
	}
	/**
	 * 入库打印
	 */
	function actionInFarLabel() {
		header ( 'Content-Type:application/json' );
		$order = Order::find ( 'order_id = ?', request ( 'orderid' ) )->getOne ();
		$far_packages = Farpackage::find ( 'order_id = ?', $order->order_id )->getAll ();
		$total_qty = 0;
		$total_weight = 0;
		$total_volume = 0;
		foreach ( $far_packages as $far_package ) {
			$total_qty += $far_package->quantity;
			$total_weight += $far_package->weight;
			$total_volume += $far_package->length * $far_package->width * $far_package->height;
		}
		$json_arr = array ();
		$json_arr ['far_no'] = $order->far_no;
		$json_arr ['ali_order_no'] = $order->ali_order_no;
		$json_arr ['SP'] = $order->volumn_chargeable ? 'P' : 'S';
		$quote = new Helper_Quote ();
		$json_arr ['R'] = $quote->Checkremote ( $order ) ? 'R' : '';
		$json_arr ['UFD'] = $quote->Checkremote ( $order ) ? 'U' : '';
		$json_arr ['datetime'] = date ( 'Y-m-d' );
		$fofn = '';
		if ($order->declaration_type == 'DL') {
			$fofn = 'FO';
		} elseif ($order->total_amount > 700 || $order->weight_actual_in > 70) {
			$fofn = 'FN';
		}
		$json_arr ['weightmore'] = $order->volumn_chargeable?$order->weight_income_in-$order->weight_actual_in:'';
		$json_arr ['FOFN'] = $fofn;
		$json_arr ['TQ'] = $total_qty;
		$json_arr ['LWH'] = '';
		if ($total_qty == '1') {
			$package = Farpackage::find ( 'order_id = ?', $order->order_id )->getOne ();
			$json_arr ['LWH'] = $package->length . ' * ' . $package->width . ' * ' . $package->height;
		}
		$json_arr ['TW'] = $total_weight;
		$json_arr ['TV'] = number_format ( $total_volume, 2 );
		$json_arr ['TV5'] = number_format ( $total_volume / 5000, 2 );
		$json_arr ['TV6'] = number_format ( $total_volume / 6000, 2 );
		$json_arr ['account'] = $order->account;

		return json_encode ( $json_arr );
		exit ();
	}
	/**
	 * confirm
	 */
	function actionConfirm() {
		$in_nos = Order::find ( 'order_status=5' )->setColumns ( 'ali_order_no' )
			->getAll ()
			->getCols ( 'ali_order_no' );
		$this->_view ['in_nos'] = $in_nos;
	}
	/**
	 * confirm save
	 */
	function actionConfirmSave() {
		header ( 'Content-Type:application/json' );
		$arr = json_decode ( request ( 'jsonstr' ), true );
		QLog::log ( print_r ( $arr, true ) );
		$ret = array (
			'code' => '1000',
			'msg' => '错误',
			'sound' => 'cuowu.mp3',
			'data' => '',
			'status' => false
		);
		try {
			$event_location = '';
			$department = Department::find ( 'department_id=?', MyApp::currentUser ( 'department_id' ) )->getOne ();
			if ($department->department_name == '战略项目部') {
				$event_location = '杭州';
			} elseif ($department->department_name == '义乌分公司') {
				$event_location = '义乌';
			} elseif ($department->department_name == '上海分公司') {
				$event_location = '上海';
			}
			// WAREHOUSE_INBOUND (CONFIRM-300s)\CHECK_WEIGHT (CONFIRM-150s)\CONFIRM
			foreach ( $arr ['reason_nos'] as $value ) {
				$order = Order::find ( 'ali_order_no = ?', $value ['no'] )->getOne ();
				if (! $order->isNewRecord ()) {
					$event_time = time ();
					$this->eventSave ( $order->order_id, 'WAREHOUSE_INBOUND', $event_time - 300, $event_location );
					$this->eventSave ( $order->order_id, 'CHECK_WEIGHT', $event_time - 150, $event_location );
					$this->eventSave ( $order->order_id, 'CONFIRM', $event_time, $event_location,$value ['reason'] );
				}
				//已查验
				$order->order_status='11';
				$order->save();
			}
			foreach ( $arr ['in_nos'] as $value ) {
				$order = Order::find ( 'ali_order_no = ?', $value )->getOne ();
				if (! $order->isNewRecord ()) {
					$event_time = time ();
					$this->eventSave ( $order->order_id, 'WAREHOUSE_INBOUND', $event_time - 300, $event_location );
					$this->eventSave ( $order->order_id, 'CHECK_WEIGHT', $event_time - 150, $event_location );
					$this->eventSave ( $order->order_id, 'CONFIRM', $event_time, $event_location );
				}
				//待退货
				$order->order_status='10';
				$order->save();
			}
		} catch ( Exception $e ) {
			$ret ['msg'] = '系统异常，请稍后重试';
			return json_encode ( $ret );
			exit ();
		}

		$ret ['code'] = '0';
		$ret ['msg'] = '完成';
		$ret ['sound'] = 'chayanxinxibaocunwancheng.mp3';
		$ret ['data'] = array ();
		$ret ['status'] = true;

		return json_encode ( $ret );
		exit ();
	}
	/**
	 * event
	 */
	function eventSave($order_id, $event_code, $event_time, $event_location,$reason=NULL) {
		$event = Event::find ( 'order_id=? and event_code="CONFIRM"', $order_id )->getOne ();
		$event->order_id = $order_id;
		$event->event_code = $event_code;
		$event->event_time = $event_time;
		$event->event_location = $event_location;
		$event->reason = $reason;
		$event->timezone = '8';
		$event->confirm_flag = '1';
		$event->save ();
	}
	/**
	 * 判断订单是否含有泡货和电池
	 */
	function actionCheckorder(){
	    $order=Order::find('ali_order_no=?',request('ali_order_no'))->getOne();
	    $data=array();
	    if($order->isNewRecord()){
	        $data['message']='notexist';
	    }else{
	        $flag=true;
	        foreach ($order->product as $product){
	            if($product->has_battery=='1'){
	                $flag=false;
	            }
	        }
	        if($flag){
	            if($order->order_status=='6'){
	                $data['message']='checkout';
	            }else{
    	            if($order->order_status!='4'){
    	                $data['message']='notpay';
    	            }else{
    	                if($order->add_data_status!='1'){
    	                    $data['message']='incomplete';
    	                }else{
    	                    //查询入库费用中是否存在异型包装费
    	                    $fee=Fee::find("order_id=? and fee_type = '1' and  fee_item_code = 'logisticsExpressASP_EX0034'",$order->order_id)->getOne();
    	                    if($order->volumn_chargeable=='1' || !$fee->isNewRecord()){//存在异型包装费或者需要重新填写泡重信息
    	                        $data['message']='volume_weight';
    	                        //获取订单中包裹信息
    	                        $far_packages=Farpackage::find('order_id=?',$order->order_id)->asArray()->getAll();
    	                        $data['packages']=$far_packages;
    	                        $data['special_packing_fee_count']=$fee->quantity;
    	                    } 
    	                }
    	            }
	            }
	        }else{
	            $data['message']='hasbattery';
	        }
	    }
	    echo json_encode($data);
	    exit();
	}
	/**
	 * 包裹出库
	 */
	function actionCheckout() {
	    if(request_is_post()){
	        $order=Order::find('ali_order_no=?',request('ali_order_no'))->getOne();
	        $data=array();
	        //获取订单总重
	        $total_weight='';
	        $package_sum=Farpackage::find('order_id=?',$order->order_id)->getAll();
	        foreach ($package_sum as $v){
	            if($order->volumn_chargeable=='1'){
	                $total_weight+=$v->weight_out*$v->quantity;
	            }else{
	                $total_weight+=$v->weight*$v->quantity;
	            }
	        }
	        //将重量存入order中
	        $order->weight_actual_out=$total_weight;
            $order->save();
            //获取产品
            $product=Product::find('product_name=?',$order->service_code)->getOne();
            if($product->isNewRecord()){
                $data['message']='productnotexist';
            }else{
                //获取渠道成本
                $channelcost=ChannelCost::find('product_id=?',$product->product_id)->getAll();
                if(count($channelcost)<=0){
                    $data['message']='channelnotexist';
                }else{
                    //计算成本价格
                    $price_array=array();
                    $price_info_array=array();
                    foreach ($channelcost as $temp){
                        //获取价格-偏派-分区表
                        $channelcostppr=Channelcostppr::find('channel_cost_id=? and effective_time<=? and invalid_time>=?',$temp->channel_cost_id,time(),time())->getOne();
                        if($channelcostppr->isNewRecord()){
                            $error='channelcostpprnotexist';
                        }else{
                            $quote= new Helper_Quote();
                            $price=$quote->payment($order, $channelcostppr,$product->network_id,request('special_packing_fee_count'));
                            $price_array[$channelcostppr->channel_cost_p_p_r_id]=$price['public_price'];
                            $price_info_array[$channelcostppr->channel_cost_p_p_r_id]=$price['price_info'];
                            $error='';
                        }
                    }
                    //判断是否有查询失败的报价
                    if(count(array_filter($price_array)) != count($price_array) || $error=='channelcostpprnotexist' || max($price_array)==0){
                        $data['message']='pricenotexist';
                    }else{
                        //获取最小的价格和价格表id
                        $channel_cost_p_p_r_id=array_search(min($price_array), $price_array);
                        //实际此时是产品代码proudct_code
                        $account_name=$price_info_array[$channel_cost_p_p_r_id]['account'];
                        $account_sync=Accountsync::find('product_code=?',$account_name)->getOne();
                        $account_name=$account_sync->account;
                        //将计费重存入order中
                        $order->weight_cost_out=$price_info_array[$channel_cost_p_p_r_id]['total_weight'];
                        $order->save();
                        //调用打单方法
                        $view=$this->Getlabel($order, $account_name);
                        if($view['errormessage']!=''){
                            //渠道获取面单失败
                            $data['message']=$view['errormessage'];
                        }else{//结束
                            //存入成本费用
                            foreach ($price_info_array[$channel_cost_p_p_r_id]['fee_item'] as $key=>$fee_item){
                                //判断费用项中是否存在费用
                                if($fee_item['fee']!='0'){
                                    //获取fee_sub_code
                                    $fee_sub_code=FeeItem::find('item_code=?',$key)->getOne();
                                    $fee= new Fee();
                                    $fee->changeProps(array(
                                        'order_id'=>$order->order_id,
                                        'fee_type'=>'2',
                                        'fee_item_code'=>$fee_sub_code->sub_code,
                                        'fee_item_name'=>$fee_sub_code->item_name,
                                        'quantity'=>$fee_item['quantity'],
                                        'amount'=>$fee_item['fee'],
                                    ));
                                    $fee->save();
                                }
                            }
                            //保存出库渠道
                            $channel_cost_p_p_r=Channelcostppr::find('channel_cost_p_p_r_id=?',$channel_cost_p_p_r_id)->getOne();
                            $channel_cost=ChannelCost::find('channel_cost_id=?',$channel_cost_p_p_r->channel_cost_id)->getOne();
                            $order->channel_id=$channel_cost->channel_id;
                            //存入打单账号
                            $order->account=$account_name;
                            //将订单状态改为已出库
                            $order->order_status='6';
                            $order->save();
                            //存入事件信息
                            //打托事件
                            $department=Department::find('department_id=?',MyApp::currentUser('department_id'))->getOne();
                            if($department->department_name=='战略项目部'){
                                $location='杭州';
                            }elseif ($department->department_name=='义乌分公司'){
                                $location='义乌';
                            }elseif ($department->department_name=='上海分公司'){
                                $location='上海';
                            }
                            $palletize_event= new Event();
                            $palletize_event->changeProps(array(
                                'order_id'=>$order->order_id,
                                'event_code'=>'PALLETIZE',
                                'event_time'=>time()-2700,
                                'event_location'=>$location,
                                'timezone'=>'8',
                            	'confirm_flag'=>'1'
                            ));
                            $palletize_event->save();
                            //出库事件
                            $outbound_event= new Event();
                            $outbound_event->changeProps(array(
                                'order_id'=>$order->order_id,
                                'event_code'=>'WAREHOUSE_OUTBOUND',
                                'event_time'=>time(),
                                'event_location'=>$location,
                                'timezone'=>'8',
                            	'confirm_flag'=>'1'
                            ));
                            $outbound_event->save();
                            //承运商取件事件
                            $pickup_event= new Event();
                            $pickup_event->changeProps(array(
                                'order_id'=>$order->order_id,
                                'event_code'=>'CARRIER_PICKUP',
                                'event_time'=>time()+5100,
                                'location'=>$location,
                                'event_location'=>$location,
                                'timezone'=>'8',
                            	'confirm_flag'=>'1'
                            ));
                            $pickup_event->save();
                            $data['account']=$view['account'];
                            $data['message']='true';
                        }
                    }
                }
            }
	        echo json_encode($data);
	        exit();
	    }
	}
	/**
	 * 包裹比对
	 */
	function actionComparison() {
		$select = Order::find ( 'order_status = ?', '6' )->Joinright ( 'tb_sub_code', 'sub_code', 'tb_order.order_id=tb_sub_code.order_id' );
		$account = order::$department [request ( 'account', '义乌OGP' )];
		$select->where ( 'account in (?)', $account );
		$order = $select->asArray ()
			->getAll ();
			//提交修改
		$order_id = array ();
		if (request ( 'sub_code' )) {
			$sub_code = explode ( "\r\n", request ( 'sub_code' ) );
			foreach ( $order as $v ) {
				$orders [] = $v ['order_id'];
			}
			$orders = array_unique ( $orders );
			foreach ( $orders as $v1 ) {
				$code = Subcode::find ( 'order_id=?', $v1 )->getAll ();
				foreach ( $code as $v2 ) {
					if (! in_array ( $v2->sub_code, $sub_code )) {
						$order_id [] = $v2->order_id;
						continue 2;
					}
				}
				$o = Order::find ( 'order_id=?', $v1 )->getOne ();
				$o->order_status = '7';
				$o->sort = request ( 'sort' );
				$o->save ();
			}
			if (count ( $order_id )) {
				$select = Order::find ( 'tb_order.order_id in (?)', $order_id )->Joinright ( 'tb_sub_code', 'sub_code', 'tb_order.order_id=tb_sub_code.order_id' );
				$order_id = $select->asArray ()
					->getAll ();
				$this->_view ['order_id'] = $order_id;
			} else {
				return $this->_redirectMessage ( '核对成功', '成功', url ( '/comparison' ), 3 );
			}
		}
		$this->_view ['order'] = $order;
	}
	/**
	 * 批量修改
	 * 
	 */
	function actionBatchupdate(){
		if (request ( 'ali_order_no' )) {
			$ali_order_no = explode ( "\r\n", request ( 'ali_order_no' ) );
			if (count ( $ali_order_no )) {
				Order::meta ()->updateDbWhere ( array (
					'packing_type' => request ( 'packing_type' ) 
				), 'ali_order_no in (?)', $ali_order_no );
			}
			return $this->_redirectMessage ( '修改成功', '成功', url ( '/batchupdate' ), 2 );
		}
	}
	/**
	 * 保存泡重信息
	 */
	function actionSavevolumeweight(){
	    $items=array();
	    $data=$_POST['package'];
	    $order_id='';
	    foreach ($data['length_far'] as $i => $v){
	        $items[]=array(
	            'length_far'=>$v,
	            'width_far'=>$data['width_far'][$i],
	            'height_far'=>$data['height_far'][$i],
	            'weight_far'=>$data['weight_far'][$i],
	            'order_id'=>$data['order_id'][$i],
	            'far_package_id'=>$data['far_package_id'][$i],
	        );
	        $order_id=$data['order_id'][$i];
	    }
	    if(count($items)>0){
	        foreach ($items as $key=>$value){
	            $far_package=Farpackage::find('far_package_id=?',$value['far_package_id'])->getOne();
                $far_package->order_id=$value['order_id'];
                $far_package->length_out=$value['length_far'];
                $far_package->width_out=$value['width_far'];
                $far_package->height_out=$value['height_far'];
                $far_package->weight_out=$value['weight_far'];
	            $far_package->save();
	        }
	    }
	    //计算价格，判断价格最低的渠道
	    echo true;
	    die();
	}
	/**
	 * 获取面单
	 */
	function Getlabel($order,$account_name){
	    if($account_name=='4F1R24'){
	        $data=self::runfeng($order);
	    }else{
	        $account=UPSAccount::find("account = ?",$account_name)->getOne();
	        if(!$account->isNewRecord()){
	            $data=self::ups($order,$account);
	        }else{
	            $data['errormessage']=$account_name.'账号不存在';
	        }
	    }
	    return $data;
	}
	/**
	 * 润峯账号渠道
	 */
	static function runfeng($order){
	    //登录润峯API
	    $account='18962528018@159.com';//登录名
	    $pwd='123456';//登录密码
	    $api_url='www.runforint.com:8000';//api url地址
	    $login_resquest=array(
	        'Name'=>$account,
	        'Pwd'=>md5($pwd)
	    );
	    $tks=array();
	    $login_response=Helper_Curl::post($api_url.'/api/Login', json_encode($login_resquest),array(
	        'Content-Type: application/json'
	    ));
	    $login_response=json_decode($login_response,true);
	    if(!isset($login_response['Token'])){
	        $view['errormessage']='API认证失败！请联系管理员！';
	    }else{
	        $token=$login_response['Token'];
	        //润峯WayBillUnite API
	        $items=array();
	        $invoice=array('items'=>array(),'total'=>'');
	        //获取总重量
	        $total_weight=$order->weight_cost_out;
	        $quantity=0;
	        foreach ($order->product as $value){
	        	$quantity+=$value->product_quantity;
	        }
	        foreach ($order->product as $v){
	        	//传给润峯的商品信息
	            $items[]=array(
	                'Goods'=>$v->product_name_en,
	                'GoodsCn'=>$v->product_name,
	                'Currency'=>$order->currency_code,
	                'Count'=>$v->product_quantity,
	                'UnitPrice'=>$v->declaration_price,
	                'SubWeight'=>$quantity>0?(floor($total_weight/$quantity*100))/100:"0.1",
	                'HsCode'=>$v->hs_code,
	                'Label'=>'',
	                'Sku'=>'',
	            );
	            //FAR做Invoice
	            $invoice['items'][]=array(
	                'quantity'=>$v->product_quantity,
	                'unit'=>$v->product_unit,
	                'name'=>$v->product_name_en,
	                'hscode'=>$v->hs_code,
	                'country'=>'CN',
	                'price'=>$v->declaration_price,
	                'itotal'=>round($v->product_quantity*$v->declaration_price,2).' '.$order->currency_code,
	                'material'=>$v->material_use,
	            );
	            $invoice['total']+=round($v->product_quantity*$v->declaration_price,2);
	        }
	        //获取包裹类型
	        $package_type=$order->packing_type;
	        $state='';
	        //判断收件国家是否是US和CA
	        if($order->consignee_country_code=='US' || $order->consignee_country_code=='CA'){
	            //将收件人州转为二字码
	            $states=Uscaprovince::find('province_name=?',strtolower(str_replace(' ','',$order->consignee_state_region_code)))->getOne();
	            if($states->isNewRecord()){
	                $view['errormessage']=$order->consignee_country_code.'中不存在'.$order->consignee_state_region_code.'州';
	                return $view;
	            }else{
	                $state=$states->province_code_two;
	            }
	        }else{
	            $state=$order->consignee_country_code;
	        }
	        //判断收件人税号是否存在
	        $vat='';
	        if($order->tax_payer_id){
	            $vat=' VAT:'.$order->tax_payer_id;
	        }
	        $far_package_count=Farpackage::find('order_id=?',$order->order_id)->sum('quantity','sum_quantity')->getAll();
	        $waybill_request=array(
	            "Token"=>$token,
	            "WayBillUniteRequestData"=>array(
	                'LogisticalName'=>$package_type=='DOC'?'UPS文件':'UPS红单01',
	                'IsPackage'=>$package_type=='DOC'?'0':'1',
	                'Country'=>$order->consignee_country_code,
	                'RepertoryName'=>'义乌仓',
	                'ReferNum'=>'',
	                'Email'=>$order->consignee_email,
	                'Province'=>$state,
	                'City'=>$order->consignee_city,
	                'ContactName'=>trim($order->consignee_name1.' '.$order->consignee_name2),
	                'PostCode'=>$order->consignee_postal_code,
	                'ContactAddress'=>trim($order->consignee_street1.' '.$order->consignee_street2.$vat),
	                'ContactTel'=>$order->consignee_mobile,
	                'ContactCompany'=>trim($order->consignee_name1.' '.$order->consignee_name2),
	                'PackageCount'=>$far_package_count['sum_quantity'],
	                'IsDeclare'=>'0',
	                'WayBillUniteRequestInfoDatas'=>$items,
	            ),
	        );
	    }
	    QLog::log($order->ali_order_no.json_encode($waybill_request));
	    $waybill_response=Helper_Curl::post($api_url.'/api/WayBillUnite', json_encode($waybill_request),array(
	        'Content-Type: application/json'
	    ));
	    $waybill_response=json_decode($waybill_response,true);
	    if($waybill_response['Code']=='1'){
	        $tks[]=$waybill_response['WayBillUniteResponseData']['LogisticalNum'];
	        $dir=Q::ini('upload_tmp_dir');
	        @Helper_Filesys::mkdirs($dir);
	        $target=$dir.DS.$waybill_response['WayBillUniteResponseData']['LogisticalNum'].'.pdf';
	        //将面单存储到本地
	        $source=trim(file_get_contents('http://www.runforint.com:8000/api/PrintFile?fileurl='.$waybill_response['WayBillUniteResponseData']['LogisticalNumUrl'].'&token='.$token.'&size=0'));
	        file_put_contents($target,$source);
	        Helper_PDF::split($target,$target);//保留一半的面单
	        //将pdf转为jpg格式
	        exec("/usr/bin/convert -density 300 -depth 8 -quality 85 {$target} -append {$target}.jpg");
	        //扫描图片中条形码获取物流单号
	        $image = new ZBarCodeImage($target.'.jpg');
	        $scanner = new ZBarCodeScanner();
	        $barcode = $scanner->scan($image);
	        $barcode=Helper_Array::getCols($barcode, 'data');
	        $barcode=array_unique(array_reverse($barcode));
	        //存入sub_code表中
	        foreach ($barcode as $temp){
	            if(strlen($temp)=='18'){
	                $order_subcode=new Subcode();
	                $order_subcode->changeProps(array(
	                    'order_id'=>$order->order_id,
	                    'sub_code'=>$waybill_response['WayBillUniteResponseData']['LogisticalNum']
	                ));
	                $order_subcode->save();
	            }
	        }
	        //将tracking_number存入order中
	        $order->tracking_no=$tks[0];
	        $order->save();
	        //将invoice存储到本地
	        $jsonFile=$dir.DS.$waybill_response['WayBillUniteResponseData']['LogisticalNum'].'.json';
	        $shipper=array(
	        'account'=>'4F1R24',
	        'aname'=>'RunFeng Network Technology Co.',
	        'name'=>'SuZhou RunFeng Network Technology Co., Ltd.（YiWu branch）',
	        'address'=>'No. 41 HanChun Two area BeiYuan Street Yiwu',
	        'city'=>'YIWU',
	        'postcode'=>'322000',
	        'phone'=>'17802119771'
	            );
	        file_put_contents($jsonFile, json_encode(array(
	            'invoice'=>$invoice,
	            'shipmentid'=>self::creatShipid($tks[0]),
	            'shipper'=>$shipper,
	            'itemcount'=>$far_package_count['sum_quantity'],
	            'br_account'=>'',
	            'weight'=>$total_weight,
	            'total_weight'=>$total_weight,
	            'aname'=>trim($order->consignee_name1.' '.$order->consignee_name2),
	            'name'=>trim($order->consignee_name1.' '.$order->consignee_name2),
	            'email'=>$order->consignee_email,
	            'phone'=>$order->consignee_mobile,
	            'countrycode'=>$order->consignee_country_code,
	            'countryname'=>Country::find('code_word_two=?',$order->consignee_country_code)->getOne()->english_name,
	            'state'=>$state,
	            'city'=>$order->consignee_city,
	            'postcode'=>$order->consignee_postal_code,
	            'address'=>$order->consignee_street1.' '.$order->consignee_street2.$vat,
	            'freight'=>'0',
	            'ref1'=>'',
	            'ref2'=>'',
	            'poc_line1'=>'',
	            'poc_line2'=>'',
	            'poc_line3'=>'',
	            'tks'=>$tks[0],
	            'ali_order_no'=>$order->ali_order_no
	        )));
	        $view['errormessage']='';
	        $view['account']='RF';
	    }else{
	        $view['errormessage']=$waybill_response['WayBillUniteResponseError']['Info'];
	    }
	    return $view;
	}
	/**
	 * UPS账号渠道
	 */
	static function ups($order,$account)
	{
	    // invoice
	    $invoice=array('items'=>array(),'total'=>'');
	    $order_product=Orderproduct::find('order_id=?',$order->order_id)->getOne();
	    $desc=$order_product->product_name_en;
	    foreach ($order->product as $v){
            $invoice['items'][]=array(
                'quantity'=>$v->product_quantity,
                'unit'=>$v->product_unit,
                'name'=>$v->product_name_en,
                'hscode'=>$v->hs_code,
                'country'=>'CN',
                'price'=>$v->declaration_price,
                'itotal'=>round($v->product_quantity*$v->declaration_price,2).' '.$order->currency_code,
                'material'=>$v->material_use,
            );
            $invoice['total']+=round($v->product_quantity*$v->declaration_price,2);
	    }
	    $package=array();
	    // 参考编码
	    $refno=array();
	    $ref2='';
	    //富轩账号要加一个订单号
	    if($account->account=='4FV328'){
	        $ref2=Helper_Curl::get1('http://kuaijian.far800.com/index.php?controller=cron&action=getrefno');
	        $refno[]=array(
	            'Code'=>'PO',
	            'Value'=>$ref2
	        );
	    }
	    $far_package_count=Farpackage::find('order_id=?',$order->order_id)->sum('quantity','sum_quantity')->getAll();
	    //获取包裹类型
        $package_type=$order->packing_type;
	    $package_code=($package_type=='DOC')?'04':'02';
	    //一票多件
	    $total_weight=$order->weight_cost_out;
	    for($i=0;$i<$far_package_count['sum_quantity'] ;$i++){
	        $package[]= array(
	            'Description' => trim($desc,';'),
	            'PackageWeight' => array(
	                'UnitOfMeasurement' => array(
	                    'Code' => 'KGS',
	                    'Description' => 'Kilograms'
	                ),
	                'Weight' => strval(floor($total_weight/$far_package_count['sum_quantity']*100)/100),
	            ),
	            'Packaging' => array(
	                'Code' => $package_code,
	            ),
	            'ReferenceNumber'=>$refno,
	        );
	    }
	    // 付款方式
	    $shipmentCharge = array();
        // 三方
	    if ($account->tp_account){
			$shipmentCharge[]= array(
				 'Type'=>'01',
				 'BillThirdParty'=>array(
					 'AccountNumber' => $account->tp_account,
					 'Address'=>array(
					 	'PostalCode'=>$account->tp_postalcode,
					 	'CountryCode'=>$account->tp_countrycode
					 )
				 )
			 );
	    }else {
			// 预付
			$shipmentCharge[]=array(
				'BillShipper' => array(
					'AccountNumber' => $account->account
				),
				'Type' => '01'
			);
		}
        $state='';
        //判断收件国家是否是US和CA
        if($order->consignee_country_code=='US' || $order->consignee_country_code=='CA'){
            //将收件人州转为二字码
            $states=Uscaprovince::find('province_name=?',strtolower(str_replace(' ','',$order->consignee_state_region_code)))->getOne();
            if($states->isNewRecord()){
                $view['errormessage']=$order->consignee_country_code.'中不存在'.$order->consignee_state_region_code.'州';
                return $view;
            }else{
                $state=$states->province_code_two;
            }
        }
        //判断收件人税号是否存在
        $vat='';
        if($order->tax_payer_id){
            $vat=' VAT:'.$order->tax_payer_id;
        }
	    $address=self::splitAddress($order->consignee_street1.' '.$order->consignee_street2.$vat);
	    if(count($address)>3){
	       $view['errormessage']='收件人地址超长';
	       return $view;
	    }
	    $data = array(
	        'UPSSecurity' => array(
	            'ServiceAccessToken' => array(
	                'AccessLicenseNumber' => $account->license
	            ),
	            'UsernameToken' => array(
	                'Password' => $account->pwd,
	                'Username' => $account->userid
	            )
	        ),
	        'ShipmentRequest' => array(
	            'Request' => array(
	                'RequestOption' => 'nonvalidate',
	                'TransactionReference' => array(
	                    'CustomerContext' => 'iBayTest'
	                )
	            ),
	            'Shipment' => array(
	                'Description' => trim($desc,';'),
	                'Package' =>$package,
	                'PaymentInformation' => array(
	                    //预付
	                    'ShipmentCharge' =>$shipmentCharge,
	                ),
	                'Service' => array(
	                    'Code' => '65',
	                    'Description' => '2',
	                ),
	                'Shipper' => array(
	                    'Address' => array(
	                        'AddressLine' => self::splitAddress($account->address),
	                        'City' => $account->city,
	                        'CountryCode' => $account->countrycode,
	                        'PostalCode' => $account->postcode,
	                        'StateProvinceCode' => $account->state
	                    ),
	                    'AttentionName' => $account->aname,
	                    'Name' => $account->name,
	                    'Phone' => array(
	                        'Number' => $account->phone
	                    ),
	                    'ShipperNumber' => $account->account
	                ),
	                'ShipTo' => array(
	                    'Address' => array(
	                        'AddressLine' => $address,
	                        'City' => $order->consignee_city,
	                        'CountryCode' => $order->consignee_country_code,
	                        'PostalCode' => $order->consignee_postal_code,
	                        'StateProvinceCode' => $state
	                    ),
	                    'AttentionName' => trim($order->consignee_name1.' '.$order->consignee_name2),
	                    'Name' => trim($order->consignee_name1.' '.$order->consignee_name2),
	                    'EMailAddress'=>$order->consignee_email,
	                    'Phone' => array(
	                        'Number' => $order->consignee_mobile
	                    )
	                ),
	                'ShipmentRatingOptions' => array(
	                    'NegotiatedRatesIndicator' => '0'
	                )
	            ),
	            'LabelSpecification' => array(
	                'LabelImageFormat' => array(
	                    'Code' => 'GIF'
	                )
	            )
	        )
	    );
	    if ($state==''){
	        unset($data['ShipmentRequest']['Shipment']['ShipTo']['Address']['StateProvinceCode']);
	    }
	    if ($package_code=='04'){
	        $data['ShipmentRequest']['Shipment']['DocumentsOnlyIndicator']= (object)array();
	    }
	    QLog::log($order->ali_order_no.json_encode($data));
// 	    $endpoint='https://wwwcie.ups.com';
	    $endpoint='https://onlinetools.ups.com';
	    set_time_limit(400);
	    Helper_Curl::$connecttimeout=300;
	    Helper_Curl::$timeout=300;
	    $r=Helper_Curl::post($endpoint.'/rest/Ship', json_encode($data),array(
	        'Access-Control-Allow-Headers: Origin, X-Requested-With, Content-Type, Accept',
	        'Access-Control-Allow-Methods: POST',
	        'Access-Control-Allow-Origin: *',
	        'Content-Type: application/json'
	    ));
	    // 		echo $r;
	    $r=json_decode($r,true);
	    $dir=Q::ini('upload_tmp_dir');
	    @Helper_Filesys::mkdirs($dir);
	    $tks=array();
	    if (isset($r['ShipmentResponse']['Response']['ResponseStatus']['Code']) && $r['ShipmentResponse']['Response']['ResponseStatus']['Code']==1){
	        $pkg=$r['ShipmentResponse']['ShipmentResults']['PackageResults'];
	        if (isset($pkg['TrackingNumber'])){
	            $pkg=array($pkg);
	        }
	        $subcode1=array('waybillcode'=>$pkg[0]['TrackingNumber']);
	        $subcode2=array('waybillcode'=>$pkg[0]['TrackingNumber']);
	        if(count($pkg)>11){
	            for ($n=1;$n<11;$n++){
	                $subcode1['info'][]=array(
	                    'subcode'=>($n+1).'. '.$pkg[$n]['TrackingNumber']
	                );
	            }
	            for ($m=11;$m<count($pkg);$m++){
	                $subcode2['info'][]=array(
	                    'subcode'=>($m+1).'. '.$pkg[$m]['TrackingNumber']
	                );
	            }
	        }else{
	            for ($m=1;$m<count($pkg);$m++){
	                $subcode1['info'][]=array(
	                    'subcode'=>($m+1).'. '.$pkg[$m]['TrackingNumber']
	                );
	            }
	        }
	        foreach ($pkg as $tr){
	            $tks[]=$tr['TrackingNumber'];
	            $target=$dir.DS.$tr['TrackingNumber'].'.pdf';
	            $source=$dir.DS.$tr['TrackingNumber'].'.gif';
	            file_put_contents($source, base64_decode($tr['ShippingLabel']['GraphicImage']));
	            Helper_PDF::upslabel($source,$target);
	            //存入sub_code表中
	            $order_subcode=new Subcode();
	            $order_subcode->changeProps(array(
	                'order_id'=>$order->order_id,
	                'sub_code'=>$tr['TrackingNumber']
	            ));
	            $order_subcode->save();
	        }
	        foreach ($tks as $fname){
	            $filenames []=$dir.DS.$fname.'.pdf';
	        }
	        @Helper_PDF::merge($filenames,$dir.DS.$tks[0].'.pdf','file');
	        //将tracking_number存入order中
	        $order->tracking_no=$tks[0];
	        $order->save();
	        $jsonFile=$dir.DS.$tks[0].'.json';
	        // ups copy
            $poc_line1='SDT(F/D)';
            if ($account->tp_account){
                $tp_country=($account->tp_countrycode=='KR')?'KOREA,SOUTH':$account->tp_countrycode;
                $poc_line2="Bill Transportation to Third Party\r\n
                Bill Transportation Charges To:{$account->tp_account}\r\n
                Company Name:{$account->tp_cname}\r\n
                Country/Territory:{$tp_country}\r\n";
                $poc_line2_cn="第三方支付运输费用\r\n运输费用付款人：{$account->tp_account}\r\n公司名称：{$account->tp_cname}\r\n国家/地区：{$tp_country}\r\n";
            }else {
                $poc_line2='Bill Transportation to Shipper '.$account->account."\r\n";
                $poc_line2_cn="发件人支付运输费用".$account->account."\r\n";
            }
            $poc_line3='Bill Duty and Tax to Receiver';
            $poc_line3_cn="收件人支付关税和税款";
	        file_put_contents($jsonFile, json_encode(array(
	            'invoice'=>$invoice,
	            'shipmentid'=>self::creatShipid($tks[0]),
	            'shipper'=>$account->toArray(),
	            'servicecode'=>'65',
	            'service'=>'1P',
	            'service_name'=>'EXPRESS SAVER',
	            'documentOnly'=>$package_code=='04' ?'[X] DOCUMENTS ONLY':'',
	            'specialInstruction'=>$package_code=='04' ?'[X] UPS Express PAK':'[X] Package',
	            'taxddp'=>'1',
	            'itemcount'=>$far_package_count['sum_quantity'],
	            'dfu'=>'',
	            'weight'=>$total_weight,
	            'total_weight'=>(ceil($total_weight)-$total_weight)>='0.5'? (floor($total_weight)+'0.5') :ceil($total_weight),
	            'description'=>trim($desc,';'),
	            'aname'=>trim($order->consignee_name1.' '.$order->consignee_name2),
	            'name'=>trim($order->consignee_name1.' '.$order->consignee_name2),
	            'email'=>$order->consignee_email,
	            'phone'=>$order->consignee_mobile,
	            'countrycode'=>$order->consignee_country_code,
	            'countryname'=>Country::find('code_word_two=?',$order->consignee_country_code)->getOne()->english_name,
	            'state'=>$state,
	            'city'=>$order->consignee_city,
	            'postcode'=>$order->consignee_postal_code,
	            'ref1'=>'',
	            'ref2'=>$ref2,
	            'address'=>$order->consignee_street1.' '.$order->consignee_street2.$vat,
	            'freight'=>'0',
	            'tks'=>$tks[0],
	            'ali_order_no'=>$order->ali_order_no,
	            'subcode1'=>$subcode1,
	            'subcode2'=>$subcode2,
	            'poc_line1'=>'[X] '.$poc_line1,
	            'poc_line2'=>'[X] '.$poc_line2.'[X] '.$poc_line3,
	            'poc_line3'=>'',
	            'poc_line2_cn'=>'[X] '.$poc_line2_cn.'[X] '.$poc_line3_cn,
	            'shipmentCharge'=>$r['ShipmentResponse']['ShipmentResults']['ShipmentCharges'],
	        )));
	        $view['errormessage']='';
	        $view['account']='UPS';
	    }else {
	        $view['errormessage']=$r['Fault']['detail']['Errors']['ErrorDetail']['PrimaryErrorCode']['Description'];
	    }
	    return $view;
	}
	
	/*
	 *  @todo 分拆地址1、2、3，现在只有分拆1、2
	 *  增加电子邮件
	 */
	
	static function splitAddress($addr){
	    $addr=str_replace(" ",' ',$addr);
	    $arr=explode(" ",$addr);
	    $ret=array();
	    $line='';
	    foreach ($arr as $word){
	        if (strlen($line.' '.$word)< 34){
	            $line.=' '.$word;
	        }else {
	            $ret[]=trim($line);
	            $line=$word;
	        }
	    }
	    if ($line){
	        $ret[]=$line;
	    }
	    return $ret;
	}
	/**
	 * 导出高价数据时生成shipid
	 */
	static function creatShipid($waybillcode){
	    $waybillcode=trim($waybillcode);
	    if(strlen($waybillcode)<17){
	        return $waybillcode;
	    }
	    $acc=substr($waybillcode,2,6);
	    $num=substr($waybillcode,10,7);
	    $num26=strtoupper(base_convert((int)$num, 10, 26));
	    $dict1=array(
	        "0"=>"0","1"=>"1","2"=>"2","3"=>"3","4"=>"4","5"=>"5","6"=>"6","7"=>"7","8"=>"8","9"=>"9","A"=>"10","B"=>"11","C"=>"12","D"=>"13","E"=>"14","F"=>"15","G"=>"16","H"=>"17","I"=>"18","J"=>"19","K"=>"20","L"=>"21","M"=>"22","N"=>"23","O"=>"24","P"=>"25"
	    );
	    $dict2=array("3","4","7","8","9","B","C","D","F","G","H","J","K","L","M","N","P","Q","R","S","T","V","W","X","Y","Z");
	    $r='';
	    if(strlen($num26)<5){
	        for($k=0;$k<5-strlen($num26);$k++){
	            $r.='3';
	        }
	    }
	    $re=null;
	    for ($i=0;$i<strlen($num26);$i++){
	        $re[]=substr($num26,$i,1);
	        	
	    }
	    for ($j=0;$j<count($re);$j++){
	        if(isset($num26[$j])){
	            $r.=$dict2[$dict1[$num26[$j]]];
	        }
	    }
	    return $acc.$r;
	}
	/**
	 * 获取物流单号
	 */
	function actionGettrackingno(){
	    $order=Order::find('ali_order_no=?',request('ali_order_no'))->getOne();
	    //获取sub_code个数
	    $sub_code=Subcode::find('order_id=?',$order->order_id)->getAll();
	    $data=array(
	        'tracking_no'=>$order->tracking_no,
	        'sub_code_count'=>count($sub_code)
	    );
	    echo json_encode($data);
	    exit();
	}
	
	/**
	 * 单票核查
	 */
	function actionconfirmone(){
		if(request("ali_order_no")){
			$order=Order::find("ali_order_no=? and order_status='5'",request("ali_order_no"))->getOne();
			if($order->isNewRecord()){
				return $this->_redirectMessage('此订单不是已入库状态', '请仔细核查', url ( '/confirmone' ),3);
			}else{
				$event_location = '';
				$department = Department::find ( 'department_id=?', MyApp::currentUser ( 'department_id' ) )->getOne ();
				if ($department->department_name == '战略项目部') {
					$event_location = '杭州';
				} elseif ($department->department_name == '义乌分公司') {
					$event_location = '义乌';
				} elseif ($department->department_name == '上海分公司') {
					$event_location = '上海';
				}
				$event_time = time ();
				$this->eventSave ( $order->order_id, 'WAREHOUSE_INBOUND', $event_time - 300, $event_location );
				$this->eventSave ( $order->order_id, 'CHECK_WEIGHT', $event_time - 150, $event_location );
				$this->eventSave ( $order->order_id, 'CONFIRM', $event_time, $event_location );
				//已查验
				$order->order_status='10';
				$order->save();
				return $this->_redirectMessage('核查成功', '请继续操作', url ( '/confirmone'));
			}
		}
	}
}