<?php

/**
 * 末端渠道轨迹跟踪信息
 * @author firzen
 *
 */
class Route extends QDB_ActiveRecord_Abstract {
	
	/**
	 * 返回对象的定义
	 *
	 * @static
	 *
	 * @return array
	 */
	static function __define() {
		return array (
			
			// 用什么数据表保存对象
			'table_name' => 'tb_routes',
			
			// 指定数据表记录字段与对象属性之间的映射关系
			// 没有在此处指定的属性，QeePHP 会自动设置将属性映射为对象的可读写属性
			'props' => array (
			),
			'validations' => array (),
			'create_autofill' => array (
				'create_time'=>self::AUTOFILL_TIMESTAMP
			),
			'update_autofill' => array (
			),
		);
	}
	
	/**
	 * 开启一个查询，查找符合条件的对象或对象集合
	 *
	 * @static
	 *
	 * @return QDB_Select
	 */
	static function find() {
		$args = func_get_args ();
		return QDB_ActiveRecord_Meta::instance ( __CLASS__ )->findByArgs ( $args );
	}
	
	/**
	 * 返回当前 ActiveRecord 类的元数据对象
	 *
	 * @static
	 *
	 * @return QDB_ActiveRecord_Meta
	 */
	static function meta() {
		return QDB_ActiveRecord_Meta::instance ( __CLASS__ );
	}
	
	/* ------------------ 以上是自动生成的代码，不能修改 ------------------ */
	/**
	 * 去重保存，主要估计时间从签收倒序传入
	 * @param array $args
	 * @return void|QDB_ActiveRecord_Abstract
	 */
	static function checkAndSave($args){
		$md5=md5($args['tracking_no'].$args['time'].$args['location'].$args['description']);
		if (self::find('md5=?',$md5)->getCount()){
			return;
		}
		$obj=new self($args);
		$obj->md5=$md5;
		return $obj->save();
		//@todo 监测签收情况，同时修改订单状态
		
	}
	/**
	 * 国家匹配
	 * @param string $countryNameOrCodeWordTwo
	 * @return boolean|string
	 */
	static function countryMatch($locaiton){
		$arr=explode(',',$locaiton);
		$country=trim(array_pop($arr));
		$city=trim(array_shift($arr));
		$country=str_ireplace("Republic of",'',$country);
		if (count($arr)){
			$arr[0]=trim($arr[0]);
		}
		
		if ($country=='United States'){
			$country='US';
		}elseif (!empty($arr[0]) && $arr[0]=='Korea'){
			$country='KR';
		}elseif (!empty($arr[0]) && $arr[0]=='Venezuela'){
			$country='VE';
		}elseif ($country=='Hong Kong'){
			$country='CN';
		}elseif ($country=='Viet Nam'){
			$country='VN';
		}elseif ($country=='Serbia'){
			$country='RS';
		}
		if (strlen($country)==2){
			$c=Country::find('code_word_two=?',$country)->getOne();
		}else {
			$c=Country::find('english_name like ?',$country)->getOne();
		}
		if ($c->isNewRecord()){
			return false;
		}
		return $c->code_word_two;
	}
	function guessTimeZone(){
		$arr=explode(',',$this->location);
		$city=trim(array_shift($arr));
		
		$country=self::countryMatch($this->location);
		
		try {
			$r= CityTimezone::match($country,$city);
		}catch (Exception $ex){
			return $ex->getMessage();
		}
		return $r;
	}
	/**
	 * 生成阿里轨迹
	 * @param int $lastTime UTC+8
	 * @param Order $order
	 */
	function generateTrace($lastTime,$order){
		static $rules;
		if (is_null($rules)){
			$rules=RouteMatchRule::find()->order('id')->getAll();
			$rules=Helper_Array::groupBy($rules,'network_code');
		}
		//@todo 自动生成阿里轨迹记录
		$tz=$this->guessTimeZone();
		if (!is_int($tz)){
			$tz=-19;
		}
		
		$utc8=$this->time+(8-$tz)*3600;
		// 地址检查
		if (strlen($this->location)==0){
			QLog::log('No country');
			return false;
		}
		$locs=explode(',',$this->location);
		if (empty($locs)){
			QLog::log('No location');
			// 没有地址
			return false;
		}
		$countryName=trim(array_pop($locs));
		if (strtoupper($countryName)=='CHINA'){
			// 中国段不匹配
			return false;
		}
		$country=self::countryMatch($this->location);
		
		$qty=Orderpackage::find('order_id=?',$order->order_id)->getSum('quantity');
		$dpm='上海';
		if ($order->department_id ==6){
			$dpm='杭州';
		}elseif ($order->department_id == 8){
			$dpm='义乌';
		}
		// auto_confirm
		$autoConfirm=(Tracking::find('order_id =? and confirm_flag=0',$order->order_id)->getCount() == 0 )? 1:0;
		
		if ($utc8 > $lastTime ){
			$matched=false;
			
			foreach ($rules['UPS'] as $ruleObj){
				$condition=$ruleObj->keyword;
				$code=$ruleObj->ali_code;
				
				$condition=str_replace('\\','\\\\',$condition);
				$condition=str_replace('/','\\/',$condition);
				
				$condition=str_replace(array('(',')','.','[',']'),array('\\(','\\)','\\.','\\[','\\]'),$condition);
				
				$condition=str_replace('*','.*?',$condition);
				if (preg_match('/^'.$condition.'$/i',$this->description)){
					$matched=true;
					
					QLog::log($condition);
					
					if (substr($code,0,1)!='S' || $tz==-19){
						//匹配到异常
						$autoConfirm=0;
					}
					
					$tr=new Tracking();
					$tr->changeProps(array(
						'order_id'=>$order->order_id,
						'far_no'=>$order->far_no,
						'tracking_code'=>$code,
						'timezone'=>$tz,
						'confirm_flag'=>$autoConfirm,
						'trace_time'=>$this->time,
						'location'=>$locs[0],
						'quantity'=>$qty,
						'trace_desc_cn'=>strlen($ruleObj->cn_desc)? $ruleObj->cn_desc:Tracking::$trace_code_cn[$code],
						'trace_desc_en'=>self::clearDescription($this->description),
						'route_id'=>$this->id
					));
					$tr->save();
					// 如果是签收，那么还要生成签收事件
					if ($code=='S_DELIVERY_SIGNED' && Event::find('order_id =? and event_code ="DELIVERY"',$order->order_id)->getCount() ==0){
						$evt=new Event();
						$evt->changeProps(array(
							'order_id'=>$order->order_id,
							'event_code'=>'DELIVERY',
							'event_time'=>$this->time,
							'event_location'=>$locs[0],
							'location'=>$locs[0],
							'timezone'=>$tz,
							'confirm_flag'=>0,
						));
						$evt->save();
					}
					// @todo 把订单改成签收状态
				}
			}
			if ($matched==false){
				QLog::log('无匹配规则');
				
				// mismatch
				$code='F_DELIVERY_5053';
				$tr=new Tracking();
				$tr->changeProps(array(
					'order_id'=>$order->order_id,
					'far_no'=>$order->far_no,
					'tracking_code'=>$code,
					'timezone'=>$tz,
					'confirm_flag'=>0,
					'trace_time'=>$this->time,
					'location'=>$locs[0],
					'quantity'=>$qty,
					'trace_desc_cn'=>strlen($ruleObj->cn_desc)? $ruleObj->cn_desc:Tracking::$trace_code_cn[$code],
					'trace_desc_en'=>strlen($ruleObj->en_desc)? $ruleObj->en_desc:"",
					'route_id'=>$this->id
				));
				$tr->save();
			}
		}else {
			QLog::log('Time-');
		}
	}
	static function clearDescription($str){
		return str_ireplace(array('UPS','DHL','FEDEX','ARMEX','TNT'),'',$str);
	}
}
