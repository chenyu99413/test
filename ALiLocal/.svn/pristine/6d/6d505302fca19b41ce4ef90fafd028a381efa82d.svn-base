<?php
require_once dirname(__FILE__) . DS . 'PDFMerger' . DS . 'PDFMerger.php';
@require_once (dirname(__FILE__) . DS . 'PDFMerger' . DS . 'fpdf/fpdf.php');
@require_once (dirname(__FILE__) . DS . 'PDFMerger' . DS . 'fpdi/fpdi.php');

class Helper_PDF
{

	/**
	 * 合并 PDF 文件
	 * 
	 * @param array $filenames
	 * @param string $outputmode
	 * @param string $outputpath
	 */
	static function merge($filenames, $outputpath = 'newfile.pdf', $outputmode = 'browser')
	{
		$filenames = Q::normalize($filenames);
		
		$pdf = new PDFMerger();
		foreach ($filenames as $fname) {
			$pdf->addPDF($fname);
		}
		$pdf->merge($outputmode, $outputpath);
	}
	/**
	 *合并invoice和label 文件
	 *
	 * @param array $filenames
	 * @param string $outputmode
	 * @param string $outputpath
	 */
	static function combiprint($filenames, $outputpath = 'newfile.pdf', $outputmode = 'I')
	{
	    $pdf = new FPDI();
	    foreach ($filenames as $filename){
	        $page_count=$pdf->setSourceFile($filename);
            for ($i=1;$i<=$page_count;$i++){
                $tpl=$pdf->importPage($i);
                $size= $pdf->getTemplateSize($tpl);
                if(!strstr($filename, '_invoice')){
                    $pdf->AddPage('P',array($size['w']*3, $size['h']*3));
                    $pdf->useTemplate($tpl,null,null,$size['w']*3, $size['h']*3);
                }else{
                    $pdf->AddPage('P',array($size['w'], $size['h']));
                    $pdf->useTemplate($tpl,null,null,$size['w'], $size['h']);
                }
	        }
	    }
	    $pdf->Output($outputpath,$outputmode);
	}
	/**
	 * 拆分 PDF 文件
	 *
	 * @param array $filenames
	 * @param string $outputmode
	 * @param string $outputpath
	 */
	static function split($filenames, $outputpath = 'newfile.pdf', $outputmode = 'F')
	{
	    $pdf = new FPDI();
	    $page_count=$pdf->setSourceFile($filenames);
	    for ($i=1;$i<=$page_count/2;$i++){
	        $tpl=$pdf->importPage($i);
	        $size= $pdf->getTemplateSize($tpl);
	        $pdf->AddPage('P',array($size['w'], $size['h']));
	        $pdf->useTemplate($tpl);
	    }
	    $pdf->Output($outputpath,$outputmode);
	    $pdf->Close();
	}
	/**
	 * 根据输入的 ups gif label 图片文件转换为 pdf 文件
	 * @param url $gifFilePath
	 * @param url $saveFilePath
	 * @example
	 * 	# direct output to the browser
	 * 	Helper_PDF::upslabel(INDEX_DIR.'/_tmp/upload/1Z3X22910415814856.gif')
	 * @example 
	 * 	# save to file save to file
	 * 	Helper_PDF::upslabel(INDEX_DIR.'/_tmp/upload/1Z3X22910415814856.gif','./a.pdf')
	 */
	static function upslabel($gifFilePath,$saveFilePath=''){
		$pdf = new PDF('P','in',array(4,6));
		$pdf->SetMargins(0,0,0);
		$pdf->AddPage();
		$pdf->Rotate(270);
		$pdf->Image($gifFilePath,0.01,-4,7,4);
		$pdf->Rotate(0);
		$pdf->Output($saveFilePath);
	}
}

class PDF_Rotate extends FPDF
{

	var $angle = 0;

	function Rotate($angle, $x = -1, $y = -1)
	{
		if ($x == - 1)
			$x = $this->x;
		if ($y == - 1)
			$y = $this->y;
		if ($this->angle != 0)
			$this->_out('Q');
		$this->angle = $angle;
		if ($angle != 0) {
			$angle *= M_PI / 180;
			$c = cos($angle);
			$s = sin($angle);
			$cx = $x * $this->k;
			$cy = ($this->h - $y) * $this->k;
			$this->_out(sprintf('q %.5F %.5F %.5F %.5F %.2F %.2F cm 1 0 0 1 %.2F %.2F cm', $c, $s, - $s, $c, $cx, $cy, - $cx, - $cy));
		}
	}

	function _endpage()
	{
		if ($this->angle != 0) {
			$this->angle = 0;
			$this->_out('Q');
		}
		parent::_endpage();
	}
}

class PDF extends PDF_Rotate
{

	function RotatedText($x, $y, $txt, $angle)
	{
		// Text rotated around its origin
		$this->Rotate($angle, $x, $y);
		$this->Text($x, $y, $txt);
		$this->Rotate(0);
	}

	function RotatedImage($file, $x, $y, $w, $h, $angle)
	{
		// Image rotated around its upper-left corner
		$this->Rotate($angle, $x, $y);
		$this->Image($file, $x, $y, $w, $h);
		$this->Rotate(0);
	}
}
