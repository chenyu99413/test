<?php
/**
 * 后台服务控制器
 *
 */
class Controller_Cron extends Controller_Abstract{
    /**
     * notifyBizEvent
     */
    function actionnotifyBizEvent(){
        $url_sign='https://gw.open.1688.com/openapi/param2/1/ali.intl.onetouch/logistics.order.notifyBizEvent/563333';
        $events=Event::find("ifnull(send_flag,'')!='1' and order_id>'82' and confirm_flag = '1' and ifnull(reason,'')=''  and event_time<=?",time())->order('order_id,event_time')->getAll();
        foreach ($events as $event){
            $ali=new Helper_ALI();
            $event_request_data=$ali->notifyBizEvent($event);
            $sign=$ali->sign($url_sign, json_encode($event_request_data),'notifyBizEvent');
            //组合完整url
            QLog::log($url_sign.'?notifyBizEventDTO='.json_encode($event_request_data).'&_aop_signature='.$sign);
            $url=$url_sign.'?notifyBizEventDTO='.urlencode(json_encode($event_request_data)).'&_aop_signature='.$sign;
            QLog::log($url);
            //通过curl get 方式发送至阿里
            $response=Helper_Curl::get1($url);
            QLog::log('event_response'.$response);
            $response=json_decode($response,true);
            if($response['success']==true){
                $event->send_flag='1';
                $event->save();
                if($event->event_code=='DELIVERY'){
	                	$order=Order::find('order_id=?',$event->order_id)->getOne();
	                	$order->delivery_time=$event->event_time;
	                	$order->save();
                }
            }
        }
        exit();
    }
    /**
     * notifyTrace
     */
    function actionnotifyTrace(){
        $url_sign='https://gw.open.1688.com/openapi/param2/1/ali.intl.onetouch/logistics.order.notifyTrace/563333';
        $tracking=Tracking::find("ifnull(send_flag,'')!='1' and order_id>'82' and confirm_flag = '1' and trace_time<=?",time())->getAll();
        foreach ($tracking as $temp){
            $ali=new Helper_ALI();
            $trace_request_data=$ali->notifyTrace($temp);
            $sign=$ali->sign($url_sign, json_encode($trace_request_data),'notifyTrace');
            //组合完整url
            $url=$url_sign.'?notifyTraceDTO='.urlencode(json_encode($trace_request_data)).'&_aop_signature='.$sign;
            //通过curl get 方式发送至阿里
            $response=Helper_Curl::get1($url);
            QLog::log('trace_request'.json_encode($trace_request_data));
            QLog::log('trace_response'.$response);
            $response=json_decode($response,true);
            if($response['success']==true){
                $temp->send_flag='1';
                $temp->save();
            }
            //自动确认签收事件
            if ($temp->tracking_code =='S_DELIVERY_SIGNED'){
	            $ev=Event::find('order_id =? and confirm_flag =0 and event_code="DELIVERY"',$temp->order_id)->getOne();
	            if (!$ev->isNewRecord()){
	            		$ev->confirm_flag=1;
	            		$ev->save();
	            }
            }
        }
        exit();
    }
    /**
     * 推送订单到快件系统中
     */
    function actionPushorder(){
    	//交货验证之后，状态是待发送
        $orders=Order::find("order_status= '7' and add_data_status='1'")->getAll();
        foreach ($orders as $order){
            //查询far_package表中包裹数量
            $package_count=Farpackage::find('order_id=?',$order->order_id)->sum('quantity','sum_quantity')->getAll();
            //查询账号
            $account=UPSAccount::find('account=?',$order->account)->asArray()->getOne();
            //判断订单为高价还是低价，根据结果决定使用哪个经营单位编码
            if($order->declaration_type=='DL' || $order->total_amount > 700 || $order->weight_actual_in > 70){//高价
                $business_code=$order->business_code;
            }else{
                $business_code=$account['business_code'];
            }
            //查询子单号
            $sub_code=Helper_Array::getCols(Subcode::find('order_id=?',$order->order_id)->asArray()->getAll(), 'sub_code');
            //获取invoice信息
            $invoice=array();
            $product_count=count($order->product);
            //中文品名，默认选择第一个
            $commodity_name="";
            //查询product表中的产品总数量
            $product_sum=Orderproduct::find('order_id=?',$order->order_id)->sum('product_quantity','product_sum')->getAll();
            //只拿第一条产品
            $order_product=Orderproduct::find('order_id=?',$order->order_id)->getOne();
            $commodity_name=$order_product->product_name;
            $check_hs=Hs::find('HSCode=?',$order_product->hs_code_far)->getOne();
            $quantity1=$product_sum['product_sum'];
            $quantity2=$product_sum['product_sum'];
            //自动填充单位1和单位2的数量
            if($check_hs->unit1=='千克'){
                $quantity1=$order->weight_actual_out;
            }
            if($check_hs->unit2=='千克' || ($check_hs->unit2=='' && $check_hs->unit1=='千克')){
                $quantity2=$order->weight_actual_out;
            }
            $invoice[]=array(
                'product_name_en_far'=>$order_product->product_name_en_far,
                'product_name_far'=>$order_product->product_name_far,
                'hs_code_far'=>$order_product->hs_code_far,
                'weight'=>$order->weight_actual_out,
                'declaration_price'=>$order->total_amount,
                'currency_code'=>$order->currency_code,
                'product_quantity1_far'=>$quantity1,
                'product_unit1_far'=>$check_hs->unit1,
                'product_quantity2_far'=>$quantity2,
                'product_unit2_far'=>$check_hs->unit2?$check_hs->unit2:$check_hs->unit1,
            );
            $order_product->product_quantity1_far=$quantity1;
            $order_product->product_unit1_far=$check_hs->unit1;
            $order_product->product_quantity2_far=$quantity2;
            $order_product->product_unit2_far=$check_hs->unit2?$check_hs->unit2:$check_hs->unit1;
            $order_product->save();
            $vat='';
            if($order->tax_payer_id){
                $vat=' VAT:'.$order->tax_payer_id;
            }
            $account_sync=Accountsync::find('account=?',$order->account)->getOne();
            //组合数据
            $data=array(
                'tracking_no'=>$order->tracking_no,
            	'record_order_date'=>$order->record_order_date,
                'declaration_type'=>$order->declaration_type,
                'total_amount'=>$order->total_amount,
                'weight_actual_in'=>$order->weight_actual_in,
                'weight_cost_out'=>$order->weight_cost_out,
                'weight_income_in'=>$order->weight_income_in,
                'weight_actual_out'=>$order->weight_actual_out,
                'packing_type'=>$order->packing_type,
                'item_count'=>$package_count['sum_quantity'],
                'consignee_country_code'=>$order->consignee_country_code,
                'account'=>$order->account,
                'sender_cn'=>$account['sender_cn'],
                'aname'=>$account['aname'],
                'address'=>$account['address'],
                'address_cn'=>$account['address_cn'],
                'name'=>$account['name'],
                'phone'=>$account['phone'],
                'city'=>$account['city'],
                'city_cn'=>$account['city_cn'],
                'business_code'=>$business_code,
                'consignee_cn'=>$order->consignee_cn,
                'consignee_name'=>$order->consignee_name1,
            	'consignee_company'=>$order->consignee_name2?$order->consignee_name2:$order->consignee_name1,
                'consignee_address_cn'=>$order->consignee_address_cn,
                'consignee_address'=>$order->consignee_street1.' '.$order->consignee_street2.$vat,
                'consignee_mobile'=>$order->consignee_mobile,
                'consignee_city'=>$order->consignee_city,
                'consignee_postal_code'=>$order->consignee_postal_code,
                'credit_code'=>$account['credit_code'],
                'channel_id'=>$account_sync->channel_id,
            	'channel_name'=>$account_sync->channel_name,
            	'product_id'=>$account_sync->product_id,
            	'product_name'=>$account_sync->product_name,
                'commission_code'=>$order->commission_code,
            	'commodity_name'=>$commodity_name,
                'sort'=>$order->sort,
                'subcodes'=>$sub_code,
                'invoice'=>$invoice
            );
            QLog::log($order->tracking_no.json_encode($data));
            //发送数据
            $response=Helper_Curl::post('http://kuaijian.far800.com/index.php?controller=cron&action=getwaybill', json_encode($data));
            if($response=='成功'){//推送信息成功
                $order->order_status='8';
                $order->error_message='';
                $order->save();
            }else{//失败
                $order->error_message=$response;
                $order->add_data_status='';
                $order->save();
            }
        }
    }
    /**
     * 跟踪渠道末端轨迹
     */
    function actionRoute(){
    		$args=func_get_args();
    		$sleep=Q::cache('RouteSleep',array('life_time'=>3600));
    		if ($sleep && empty($args[3])){
    			self::log('sleep');
    			exit;
    		}
    		self::log('begin');
    		$select=Order::find('order_status in (?)',array(Order::STATUS_OUT,Order::STATUS_PRESEND,Order::STATUS_SENT,Order::STATUS_LOCK));
    		if (!empty($args[3]) && $args[3]!='force'){
    			$select->where('tracking_no =?',$args[3]);
    		}
    		$select= $select->order('update_time')
    			->setColumns('order_id,tracking_no,channel_id')
    			->all()
    			->getQueryHandle();
    		while ($row=$select->fetchRow()){
    			self::log($row['order_id']);
    			$order=Order::find('order_id =?',$row['order_id'])->getOne();
    			
    			if (!empty($row['tracking_no']) && !empty($row['channel_id'])){
    				self::log($row['tracking_no']);
    				
    				$channel =Channel::find('channel_id =?',$row['channel_id'])->getOne();
    				$trackings=Tracking::find('order_id =?',$row['order_id'])->getAll();
    				
    				// 求最晚时间并转换为utc+8
    				$evt=Event::find('order_id =? ',$row['order_id'])->order('event_time desc') ->getOne();
    				$lastTime=strtotime(date("Y-m-d 2:25:00",$evt->event_time))+86400*2;	//事件最后的时间+2天
    				
    				if (count($trackings)) foreach ($trackings as $tr){
    					if ($tr->timezone==-19){
    						continue;
    					}
    					if ($tr->trace_time + (8-$tr->timezone )*3600 > $lastTime ){
    						$lastTime =$tr->trace_time + (8-$tr->timezone )*3600;
    					}
    				}
    				
    				$network_code=$channel->network_code;
    				if ($network_code =='UPS'){
    					$json=Helper_Curl::get('http://m.far800.com/?action=tracking&num='.$row['tracking_no'].'&lang=en');
    					$routes=json_decode($json,TRUE);
    					if (!empty($routes['data']) && count($routes['data'])){
    						// 将轨迹按照时间升序排序
    						$routes['data']=array_reverse($routes['data']);
    						$prevLocation='';
    						foreach ($routes['data'] as $d){
    							// 保存
    							$r=Route::checkAndSave(array(
    								'tracking_no'=>$row['tracking_no'],
    								'time'=>strtotime($d['time']),
    								'location'=>$d['location'],
    								'description'=>$d['context'],
    							));
    							if (!is_null($r)){
    								self::log('save');
    								$r->generateTrace($lastTime,$order,$prevLocation);
    							}
    							
    							if (strlen($d['location'])){
    								$prevLocation=$d['location'];
    							}
    						}
    					}
    				}
    			}
    		}
    		Q::writeCache('RouteSleep',true,array('life_time'=>3600));
    		exit;
    }
    static function log($str){
    		QLog::log($str);
    		echo date('Ymd H:i').']'.$str."\n";
    }
    
    /**
     * 推送数据到新的出库表格里
     */
    function actionsyncpackage(){
    	set_time_limit(0);
    	$farpackages=Farpackage::find()->getAll();
    	foreach ($farpackages as $f){
    		$order=Order::find('order_id=? and order_status=5',$f->order_id)->getOne();
    		if(!$order->isNewRecord()){
    			continue;
    		}
    		$faroutpackge=new Faroutpackage();
    		$faroutpackge->order_id=$f->order_id;
    		$faroutpackge->quantity_out=$f->quantity;
    		if($f->weight_out>0){
    			$faroutpackge->length_out=$f->length_out;
    			$faroutpackge->width_out=$f->width_out;
    			$faroutpackge->height_out=$f->height_out;
    			$faroutpackge->weight_out=$f->weight_out;
    		}else{
    			$faroutpackge->length_out=$f->length;
    			$faroutpackge->width_out=$f->width;
    			$faroutpackge->height_out=$f->height;
    			$faroutpackge->weight_out=$f->weight;
    		}
    		$faroutpackge->save();
    	}
    	exit;
    }
    
    /**
     * 测试拆分阿里推送过来的数据
     */
    function actiontestapi(){
    	$url='localhost/AliExpress/Code/api/orderbooking';
    	$requestBody='{"bookingOrderDTO":"{\"aliOrderNo\":\"ALS002019031503\",\"consignee\":{\"city\":\"North hudson\",\"countryCode\":\"US\",\"mobile\":\"7153772133\",\"name1\":\"Ceme-Tube LLC\",\"name2\":\"Ceme-Tube LLC\",\"postalCode\":\"54016\",\"stateRegionCode\":\"Wisconsin\",\"street1\":\"579 Schommer Dr\"},\"consignor\":{\"city\":\"苏州市\",\"countryCode\":\"CN\",\"email\":\"eric.hwang@wonsten.com\",\"mobile\":\"18112752189\",\"name1\":\"王欣跃\",\"postalCode\":\"215600\",\"stateRegionCode\":\"江苏省\",\"street1\":\"乐余镇兆丰开发区双丰路5号\"},\"customsDeclaration\":{\"currencyCode\":\"USD\",\"declarationType\":\"QT\",\"totalAmount\":1000},\"needInsurance\":false,\"needPickUp\":false,\"packages\":[{\"height\":40,\"length\":67,\"packageType\":\"BOX\",\"quantity\":1,\"unit\":\"CM\",\"weight\":40,\"weightUnit\":\"KG\",\"width\":40}],\"products\":[{\"declarationPrice\":1000,\"hasBattery\":false,\"hsCode\":\"9617001100\",\"productName\":\"撕碎机筛网\",\"productNameEn\":\"Screen for shredder \",\"productQuantity\":1,\"productUnit\":\"pcs\"}],\"referenceNo\":\"803678522198,803678522199\",\"serviceCode\":\"Express_Standard_Global\",\"warehouse\":{\"code\":\"ASP_FAR_SH_PD\",\"name\":\"泛远上海浦东仓\"}}","sign":"302c02147ab07e89a99b19c4fe7f79a1ec9d918a2989f3d4021439822da781fe778c67b5b07caffb00b15b8a7e73"}';
    	Helper_Curl::post($url, $requestBody);
    	exit;
    }
    
    /**
     * 将阿里老订单里的运单号拆分到新表中
     */
    function actionsplitreference(){
    	set_time_limit(0);
    	$orders=Order::find('order_id <1452')->getAll();
    	foreach ($orders as $order){
    	  	if(strlen($order->reference_no)){
	        	$references=explode(",", $order->reference_no);
	        	foreach ($references as $r){
	        		$alireference=new Alireference();
	        		$alireference->order_id=$order->order_id;
	        		$alireference->reference_no=$r;
	        		$alireference->save();
	        	}
        	}
    	}
    	exit;
    }
    
    /**
     * 处理老数据的重量问题
     */
    function actioncalcweight(){
    	set_time_limit(0);
    	$orders=Order::find('ali_testing_order !="1" and order_status not in ("1","2","3","11") and order_id <101')->getAll();
    	foreach ($orders as $order){
    		$order_packages=Orderpackage::find('order_id=?',$order->order_id)->getAll();
    		//阿里的实重
    		if(!$order->weight_actual_ali){
    			if(count($order_packages)){
    				$weight_actual_ali=0;
    				foreach ($order_packages as $op_actual){
    					$weight_actual_ali+=$op_actual->weight*$op_actual->quantity;
    				}
    				if($weight_actual_ali>0){
    					$order->weight_actual_ali=$weight_actual_ali;
    					$order->save();
    				}
    			}
    		}
    		//阿里的计费重
    		if(!$order->weight_income_ali){
    			if(count($order_packages)){
    				$weight_income_ali=0;
					foreach ($order_packages as $op_income){
						$weight_income_ali+=$op_income->length*$op_income->width*$op_income->height/5000 >$op_income->weight?$op_income->length*$op_income->width*$op_income->height/5000*$op_income->quantity:$op_income->weight*$op_income->quantity;
					}
					if($weight_income_ali>0){
						$order->weight_income_ali=$weight_income_ali;
						$order->save();
					}
    			} 
    		}
    		
    		$far_in_packages=Farpackage::find('order_id=?',$order->order_id)->getAll();
    		//应收实重
    		if(!$order->weight_actual_in){
    			if(count($far_in_packages)){
    				$weight_actual_in=0;
    				foreach ($far_in_packages as $far_in_actual){
    					$weight_actual_in+=$far_in_actual->weight*$far_in_actual->quantity;
    				}
    				if($weight_actual_in>0){
    					$order->weight_actual_in=$weight_actual_in;
    					$order->save();
    				}
    			} 
    		}
    		//应收计费重
    		if(!$order->weight_income_in){
    			if(count($far_in_packages)){
    				 $weight_income_in=0;
    				 foreach ($far_in_packages as $far_in_income){
    				 	$volumn_weight=$far_in_income->length*$far_in_income->width*$far_in_income->height/5000;
    				 	$volumn=$far_in_income->length*$far_in_income->width*$far_in_income->height/5000>$far_in_income->weight;
    				 	if($volumn){
    				 		$weight_income_in+=$volumn_weight>20?ceil($volumn_weight)*$far_in_income->quantity:ceil($volumn_weight/0.5)*0.5*$far_in_income->quantity;
    				 	}else{
    				 		$weight_income_in+=$far_in_income->weight>20?ceil($far_in_income->weight)*$far_in_income->quantity:ceil($far_in_income->weight/0.5)*0.5*$far_in_income->quantity;
    				 	}
    				 	
    				 }
    				 if($weight_income_in>0){
    				 	$order->weight_income_in=$weight_income_in>20?ceil($weight_income_in):$weight_income_in;
    				 	$order->save();
    				 }
    			} 
    		}
    		
    		$far_out_packages=Faroutpackage::find('order_id=?',$order->order_id)->getAll();
    		//应付实重
    		if(!$order->weight_actual_out){
    			if(count($far_out_packages)){
    				$weight_actual_out=0;
    				foreach ($far_out_packages as $far_actual_out){
    					$weight_actual_out+=$far_actual_out->weight_out*$far_actual_out->quantity_out;
    				}
    				if($weight_actual_out>0){
    					$order->weight_actual_out=$weight_actual_out>20?ceil($weight_actual_out):$weight_actual_out;
    					$order->save();
    				}	
    			} 
    		}
    		//应付计费重
    		if(!$order->weight_cost_out && $order->channel_id){
    			$ratio=5000;
    			if(in_array($order->channel_id, array('2','4'))){
    				$ratio=6000;
    			}
    			if(count($far_out_packages)){
    				$weight_cost_out=0;
    				foreach ($far_out_packages as $far_cost_out){
    					$volumn_weight=$far_cost_out->length_out*$far_cost_out->width_out*$far_cost_out->height_out/$ratio;
    					$volumn=$far_cost_out->length_out*$far_cost_out->width_out*$far_cost_out->height_out/$ratio>$far_cost_out->weight_out;
    					if($volumn){
    						$weight_cost_out+=$volumn_weight>20?ceil($volumn_weight)*$far_cost_out->quantity_out:ceil($volumn_weight/0.5)*0.5*$far_cost_out->quantity_out;
    					}else{
    						$weight_cost_out+=$far_cost_out->weight_out>20?ceil($far_cost_out->weight_out)*$far_cost_out->quantity_out:ceil($far_cost_out->weight_out/0.5)*0.5*$far_cost_out->quantity_out;
    					}
    				
    				}
    				if($weight_cost_out>0){
    					$order->weight_cost_out=$weight_cost_out>20?ceil($weight_cost_out):$weight_cost_out;
    					$order->save();
    				}
    			} 
    		}
    	}
    	exit;
    }
}
